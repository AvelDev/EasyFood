rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Funkcja pomocnicza do sprawdzania czy użytkownik jest administratorem
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Funkcja walidująca pola zamówienia
    function isValidOrderUpdate(data) {
      // Sprawdź czy admin fields są ustawiane tylko przez administratorów
      let adminFieldsPresent = 'adminNotes' in data.keys() || 
                              'costAdjustment' in data.keys() || 
                              'paymentStatus' in data.keys() || 
                              'orderConfirmed' in data.keys();
      
      // Jeśli są admin fields, musi być admin
      return !adminFieldsPresent || isAdmin();
    }

    // Dostęp do danych użytkowników
    match /users/{userId} {
      // Pozwól wszystkim zalogowanym użytkownikom czytać podstawowe informacje (name, uid)
      // potrzebne do wyświetlania nicków przy głosach i zamówieniach
      allow read: if request.auth != null;
      
      // Tworzenie i aktualizacja tylko własnych danych
      allow create, update: if request.auth != null && request.auth.uid == userId;
      
      // Pozwól użytkownikowi usunąć własne konto
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Dostęp do głosowań (polls)
    match /polls/{pollId} {
      // Czytanie i tworzenie dla wszystkich zalogowanych użytkowników
      allow read, create, update: if request.auth != null;
      
      // Usuwanie tylko dla administratorów
      allow delete: if isAdmin();

      // Dostęp do głosów w ramach danego głosowania
      match /votes/{voteId} {
        allow read, create: if request.auth != null;
        // Pozwól użytkownikowi aktualizować i usuwać własne głosy
        allow update, delete: if request.auth != null && 
                              resource.data.userId == request.auth.uid;
      }

      // Dostęp do zamówień w ramach danego głosowania
      match /orders/{orderId} {
        allow read, create: if request.auth != null;
        
        // Pozwól użytkownikowi aktualizować i usuwać własne zamówienia
        // oraz administratorom aktualizować wszystkie zamówienia
        // Dodatowa walidacja dla pól administratora
        allow update: if request.auth != null && 
                      (resource.data.userId == request.auth.uid || isAdmin()) &&
                      isValidOrderUpdate(request.resource.data);
        
        // Usuwanie tylko własnych zamówień
        allow delete: if request.auth != null && 
                      resource.data.userId == request.auth.uid;
      }
    }
  }
}
