rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Funkcja pomocnicza do sprawdzania czy użytkownik jest administratorem
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Funkcja walidująca pola zamówienia
    function isValidOrderUpdate(data) {
      // Sprawdź czy admin fields są ustawiane tylko przez administratorów
      let adminFieldsPresent = 'adminNotes' in data.keys() || 
                              'costAdjustment' in data.keys() || 
                              'paymentStatus' in data.keys() || 
                              'orderConfirmed' in data.keys();
      
      // Jeśli są admin fields, musi być admin
      return !adminFieldsPresent || isAdmin();
    }

    // Dostęp do danych użytkowników
    match /users/{userId} {
      // Pozwól wszystkim zalogowanym użytkownikom czytać podstawowe informacje (name, uid)
      // potrzebne do wyświetlania nicków przy głosach i zamówieniach
      // Administratorzy mogą czytać wszystkie dane użytkowników (w tym daty utworzenia)
      allow read: if request.auth != null;
      
      // Tworzenie i aktualizacja tylko własnych danych
      // WYJĄTEK: Administratorzy mogą aktualizować pole 'role' innych użytkowników
      allow create: if request.auth != null && request.auth.uid == userId;
      
      allow update: if request.auth != null && 
                    (request.auth.uid == userId || 
                     (isAdmin() && 
                      // Administratorzy mogą zmieniać tylko pole 'role'
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']) &&
                      // Nowa rola musi być 'admin' lub 'user'
                      request.resource.data.role in ['admin', 'user']));
      
      // Pozwól użytkownikowi usunąć własne konto
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Dostęp do szablonów głosowań (poll templates)
    match /pollTemplates/{templateId} {
      // Czytanie dla wszystkich zalogowanych użytkowników
      allow read: if request.auth != null;
      
      // Tworzenie, aktualizacja i usuwanie tylko dla administratorów
      allow create, update, delete: if isAdmin();
    }

    // Dostęp do ustawień aplikacji (app settings)
    match /appSettings/main {
      // Czytanie tylko dla administratorów
      allow read: if isAdmin();
      
      // Aktualizacja tylko dla administratorów
      allow update: if isAdmin();
      
      // Tworzenie tylko dla administratorów (przy pierwszym uruchomieniu)
      allow create: if isAdmin();
    }

    // Dostęp do głosowań (polls)
    match /polls/{pollId} {
      // Czytanie i tworzenie dla wszystkich zalogowanych użytkowników
      allow read, create: if request.auth != null;
      
      // Aktualizacja tylko dla administratorów (mogą edytować aktywne głosowania)
      // lub dla twórcy głosowania (tylko jeśli głosowanie jeszcze się nie rozpoczęło)
      allow update: if request.auth != null && 
                    (isAdmin() || 
                     (request.auth.uid == resource.data.createdBy && 
                      resource.data.votingEndsAt > request.time));
      
      // Usuwanie tylko dla administratorów
      allow delete: if isAdmin();

      // Dostęp do głosów w ramach danego głosowania
      match /votes/{voteId} {
        // Funkcja sprawdzająca czy poll jest aktywny (czas głosowania nie minął)
        function isPollActive(pollId) {
          return exists(/databases/$(database)/documents/polls/$(pollId)) &&
                 get(/databases/$(database)/documents/polls/$(pollId)).data.votingEndsAt > request.time &&
                 !get(/databases/$(database)/documents/polls/$(pollId)).data.closed;
        }
        
        // Walidacja danych głosu - sprawdź czy zawiera poprawne pola
        function isValidVote(data) {
          return data.keys().hasAll(['userId', 'createdAt']) && 
                 (data.keys().hasAny(['restaurant', 'restaurants'])) &&
                 data.userId is string &&
                 data.createdAt is timestamp &&
                 // userName jest opcjonalne ale jeśli istnieje, musi być stringiem
                 (!('userName' in data.keys()) || data.userName is string) &&
                 // Jeśli jest restaurants, musi być tablicą stringów (może być pusta do usuwania)
                 (!('restaurants' in data.keys()) || data.restaurants is list) &&
                 // Jeśli jest restaurant, musi być stringiem (backward compatibility)
                 (!('restaurant' in data.keys()) || data.restaurant is string);
        }
        
        allow read: if request.auth != null;
        // Tworzenie głosów tylko gdy poll jest aktywny
        allow create: if request.auth != null && 
                      isPollActive(pollId) &&
                      request.resource.data.userId == request.auth.uid &&
                      isValidVote(request.resource.data);
        // Pozwól użytkownikowi aktualizować własne głosy tylko gdy poll jest aktywny
        allow update: if request.auth != null && 
                      isPollActive(pollId) &&
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == request.auth.uid &&
                      isValidVote(request.resource.data);
        // Pozwól użytkownikowi usuwać własne głosy tylko gdy poll jest aktywny
        allow delete: if request.auth != null && 
                      isPollActive(pollId) &&
                      resource.data.userId == request.auth.uid;
      }

      // Dostęp do zamówień w ramach danego głosowania
      match /orders/{orderId} {
        allow read, create: if request.auth != null;
        
        // Pozwól użytkownikowi aktualizować i usuwać własne zamówienia
        // oraz administratorom aktualizować wszystkie zamówienia
        // Dodatowa walidacja dla pól administratora
        allow update: if request.auth != null && 
                      (resource.data.userId == request.auth.uid || isAdmin()) &&
                      isValidOrderUpdate(request.resource.data);
        
        // Usuwanie tylko własnych zamówień
        allow delete: if request.auth != null && 
                      resource.data.userId == request.auth.uid;
      }

      // Dostęp do propozycji opcji głosowania w ramach danego głosowania
      match /votingProposals/{proposalId} {
        // Wszystkim zalogowanym użytkownikom pozwól czytać propozycje
        allow read: if request.auth != null;
        
        // Tworzenie propozycji tylko dla zalogowanych użytkowników
        // Walidacja czy użytkownik ustawia własny userId
        allow create: if request.auth != null && 
                      request.resource.data.proposedBy == request.auth.uid &&
                      request.resource.data.status == 'pending';
        
        // Aktualizacja tylko dla administratorów (zatwierdzanie/odrzucanie)
        // lub dla autora propozycji (edycja przed zatwierdzeniem)
        allow update: if request.auth != null && 
                      (isAdmin() || 
                       (resource.data.proposedBy == request.auth.uid && 
                        resource.data.status == 'pending'));
        
        // Usuwanie tylko dla administratorów lub autora propozycji
        allow delete: if request.auth != null && 
                      (isAdmin() || resource.data.proposedBy == request.auth.uid);
      }
    }
  }
}
